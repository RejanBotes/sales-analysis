import pandas as pd
import random
from datetime import datetime, timedelta
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

#load the dataset into a pandas dataframe
csv = (r'/Users/rejanbotes/Desktop/Python Files/supermarket_sales - Sheet1.csv')


df = pd.read_csv(csv)

#lets conduct some expoloratory analysis
#print the top 5 rows
print("Top 5 rows")
print(df.head())

#print the last five rows
print("Last 5 rows")
print(df.tail())

#lets find the name of the columns we are working with and their data types
print(df.info())

#find the number of rows and columns
print(df.shape)

#lets see if the data types are for each column and if changes need to occur.
print("Data types for each column:")
print(df.dtypes)

#lets calculate the total is null values for each column and duplicated values.
print("Column isnull totals")
print(df.isnull().sum())
print("Total duplicated values")
print(df.duplicated().sum())

#lets find the number of unique values in each column.
print("Number of unique values for each column")
print(df.nunique())

#lets find the basic statistics of the dataset
print("Basic statistics of the dataset")
print(df.describe())

#in this dataset we need to change the date values to a datetime value
df['Date'] = pd.to_datetime(df['Date'])
df['Time'] = pd.to_datetime(df["Time"], format='%H:%M')


print(df.head())

#Lets see the number of Invoice ID values and compare to nunique().
print('Total Invoice ID values:')
print(df['Invoice ID'].count())

#lets count the total value of Branch values
print('Number of Branch values:')
print(df['Branch'].value_counts())

print('Product Line count:')
print(df['Product line'].value_counts())

# Create the pie chart
fig = px.pie(df, 'Product line', color_discrete_sequence=px.colors.sequential.RdBu)
# Save the pie chart as an HTML file
fig.write_html('pie_chart.html')
fig.show()

#count the payment values
print('Payment values:')
print(df['Payment'].value_counts())

# Count Customer type values
print("Customer type value count:")
print(df['Customer type'].value_counts())

#place this into a pie chart
fig_2 = px.pie(df,'Customer type',color_discrete_sequence=px.colors.sequential.RdBu)
fig_2.write_html('pie_chart_2.html')
fig_2.show()

# Group by Branch and City and aggregate Total sales
branch_city = df.groupby(['Branch', 'City']).agg({'Total': 'sum'}).reset_index()
print(branch_city)

# Group by Product line and calculate average Rating
product_line_rating = df.groupby('Product line')['Rating'].mean().reset_index()
print(product_line_rating)

#place this into a pie chart
fig_3 = px.bar(product_line_rating, x='Product line', y='Rating',title='Average Rating by Product Line')
fig_3.write_html('pie_chart_3')
fig_3.show()

# Group by Gender and sum Quantity
gender_quantity = df.groupby('Gender')['Quantity'].sum().reset_index()
print(gender_quantity)

# Create a bar chart for Total Quantity Sold by Gender
fig_4 = px.bar(gender_quantity, x='Gender', y='Quantity', title='Total Quantity Sold by Gender')
fig_4.write_html('pie_chart_4.html')
fig_4.show()

# Group by Customer type and Payment and sum Total sales
customer_payment = df.groupby(['Customer type', 'Payment'])['Total'].sum().reset_index()
print(customer_payment)

# Create a bar chart for Total Sales by Customer Type and Payment Method
fig_5 = px.bar(customer_payment, x='Customer type', y='Payment', color='Total', title='Total Sales by Customer Type and Payment Method')
fig_5.write_html('pie_chart_5.html')
fig_5.show()

# Group by Date and sum Total sales
date_sales = df.groupby('Date')['Total'].sum().reset_index()
print(date_sales)

# Create a line chart for Total Sales Over Time
fig_6 = px.line(date_sales, x='Date', y='Total', title='Total Sales Over Time')
fig_6.write_html('pie_chart_6.html')
fig_6.show()

# Group by Product line and calculate average Unit price
product_line_unit_price = df.groupby('Product line')['Unit price'].mean().reset_index()
print(product_line_rating)

# Create a bar chart for Average Unit Price by Product Line
fig_7 = px.bar(product_line_unit_price, x='Product line', y='Unit price',title='Average Unit Price by Product Line')
fig_7.write_html('pie_chart_7.html')
fig_7.show()

# Group by Gender and Product line and count occurrences
gender_product_line = df.groupby(['Gender', 'Product line']).size().reset_index(name='Count')
print(gender_product_line)

# Create a pie chart for Number of Sales by Gender and Product Line
fig_8 = px.pie(gender_product_line, values='Count', names='Product line', hover_data=['Gender'], title='Number of Sales by Gender and Product Line', color_discrete_sequence=px.colors.sequential.RdBu)
fig_8.write_html('pie_chart_8.html')
fig_8.show()

# Group by Product line and sum Quantity
product_line_quantity = df.groupby('Product line')['Quantity'].sum().reset_index()
print(product_line_quantity)


# Create a pie chart for Total Quantity Sold by Product Line
fig_9 = px.pie(product_line_quantity, values='Quantity', names='Product line',title='Total Quantity Sold by Product Line',color_discrete_sequence=px.colors.sequential.RdBu)
fig_9.write_html('pie_chart_9.html')
fig_9.show()

# Group by Gender and Payment and sum Total sales
gender_payment = df.groupby(['Gender', 'Payment'])['Total'].sum().reset_index()
print(gender_payment)

# Group by Gender and sum Total sales
gender_total = df.groupby('Gender')['Total'].sum().reset_index()
(gender_total)

# Create a pie chart for Total Sales by Gender
fig_10 = px.pie(gender_total, names='Gender', values='Total', color_discrete_sequence=px.colors.sequential.RdBu, title='Total Sales by Gender')
fig_10.write_html('pie_chart_10.html')
fig_10.show()

# Create a cross-tabulation for Payment and Branch
payment_branch = pd.crosstab(df['Payment'], df['Branch'])
print(payment_branch)

# Group by Branch and sum Total sales
branch_total_sales = df.groupby('Branch')['Total'].sum().reset_index()
print(branch_total_sales)
